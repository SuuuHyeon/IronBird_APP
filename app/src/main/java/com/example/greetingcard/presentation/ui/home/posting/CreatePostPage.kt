package com.example.greetingcard.presentation.ui.home.posting

import android.net.Uri
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.AddPhotoAlternate
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.runtime.toMutableStateList
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.greetingcard.presentation.viewModel.home.PostViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CreatePostPage(
    navController: NavController,
    postViewModel: PostViewModel
) {
    // Í≤åÏãúÍ∏Ä ÏÑ§Î™Ö
    var postText by remember { mutableStateOf("") }
    // ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ uri Î¶¨Ïä§Ìä∏ (mutableStateListOf ÏÇ¨Ïö©)
    var selectedImageUris = remember { mutableStateListOf<Uri>() }

    val pickImageLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.PickMultipleVisualMedia(),
        onResult = { uris ->
            // ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ Ïú†ÏßÄ + ÏÉàÎ°úÏö¥ Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä
            selectedImageUris.addAll(uris)
            selectedImageUris = selectedImageUris.distinct().toMutableStateList() // Ï§ëÎ≥µ Ï†úÍ±∞
        }
    )

    Scaffold(
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "ÏÉà Í≤åÏãúÍ∏Ä",
                        fontSize = 18.sp,
                        fontWeight = FontWeight.SemiBold
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞")
                    }
                }
            )
        },
        bottomBar = {
            Button(
                onClick = { postViewModel.createPost(postText, selectedImageUris) },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(horizontal = 16.dp, vertical = 12.dp)
                    .height(50.dp),
                shape = RoundedCornerShape(12.dp),
                enabled = selectedImageUris.isNotEmpty() && postText.isNotBlank()
            ) {
                Text("ÏóÖÎ°úÎìú", fontSize = 16.sp, fontWeight = FontWeight.SemiBold)
            }
        }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .padding(innerPadding)
                .fillMaxSize()
                .padding(horizontal = 20.dp),
            verticalArrangement = Arrangement.Top
        ) {
            // üîπ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïπ¥Îìú UI
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(180.dp)
                    .clip(RoundedCornerShape(14.dp))
                    .background(Color(0xFFF7F7F7))
                    .clickable {
                        pickImageLauncher.launch(PickVisualMediaRequest(ActivityResultContracts.PickVisualMedia.ImageAndVideo))
                    },
                contentAlignment = Alignment.Center
            ) {
                Column(horizontalAlignment = Alignment.CenterHorizontally) {
                    Icon(
                        Icons.Default.AddPhotoAlternate,
                        contentDescription = "Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä",
                        tint = Color.Gray,
                        modifier = Modifier.size(40.dp)
                    )
                    Spacer(modifier = Modifier.height(4.dp))
                    Text("ÏÇ¨ÏßÑ Ï∂îÍ∞Ä", color = Color.Gray, fontSize = 14.sp)
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // üîπ ÏÑ†ÌÉùÎêú Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞ (Ïä¨ÎùºÏù¥Îìú Î∞©Ïãù)
            if (selectedImageUris.isNotEmpty()) {
                LazyRow(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    items(selectedImageUris) { uri ->
                        Box(
                            modifier = Modifier
                                .size(120.dp)
                                .clip(RoundedCornerShape(12.dp))
                                .background(Color.White)
                                .border(1.dp, Color.LightGray, RoundedCornerShape(12.dp)),
                            contentAlignment = Alignment.Center
                        ) {
                            Image(
                                painter = rememberAsyncImagePainter(uri),
                                contentDescription = "ÏÑ†ÌÉùÌïú Ïù¥ÎØ∏ÏßÄ",
                                modifier = Modifier
                                    .fillMaxSize()
                                    .clip(RoundedCornerShape(12.dp)),
                                contentScale = ContentScale.Crop
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // üîπ ÏÑ§Î™Ö ÏûÖÎ†• ÌïÑÎìú (Î∂ÄÎìúÎü¨Ïö¥ Ïπ¥ÎìúÌòï)
            Card(
                shape = RoundedCornerShape(12.dp),
                elevation = CardDefaults.cardElevation(2.dp),
                colors = CardDefaults.cardColors(containerColor = Color(0xFFF9F9F9)),
                modifier = Modifier.fillMaxWidth()
            ) {
                OutlinedTextField(
                    value = postText,
                    onValueChange = { postText = it },
                    placeholder = { Text("ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•Ìï¥ Ï£ºÏÑ∏Ïöî...", color = Color.Gray) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(120.dp)
                        .padding(12.dp),
                    maxLines = 4,
                    textStyle = TextStyle(fontSize = 16.sp),
                    shape = RoundedCornerShape(8.dp)
                )
            }
        }
    }
}
